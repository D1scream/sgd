import numpy as np


class StandartScaler:
    """
    Класс для стандартизации данных, приводящий каждый признак к среднему значению 0
    и стандартному отклонению 1. 
    """

    def __init__(self):
        self.mean = None  # Среднее значение признаков, будет вычислено после fit()
        self.scale = None  # Стандартное отклонение признаков, будет вычислено после fit()

    def fit(self, X):
        """
        Вычисляет среднее и стандартное отклонение для каждого признака в данных X.
        Признаки с нулевым стандартным отклонением получают значение 1, чтобы избежать деления на ноль.
        """
        self.mean = np.mean(X, axis=0)  # Вычисляем среднее значение для каждого признака
        self.scale = np.std(X, axis=0, ddof=0)  # Вычисляем стандартное отклонение для каждого признака
        self.scale[self.scale == 0] = 1  # Обрабатываем признаки с нулевым отклонением, чтобы избежать деления на 0

    def transform(self, X):
        """
        Преобразует данные X на основе ранее вычисленных среднего и стандартного отклонения.
        Применяется только после вызова метода fit().

        RuntimeError :
            Выбрасывается, если метод fit() не был вызван перед вызовом transform().
        """
        if self.mean is None or self.scale is None:
            raise RuntimeError("ты должен fit перед transform")
        return (X - self.mean) / self.scale  # Стандартизация данных

    def fit_transform(self, X):
        """
        Комбинирует методы fit и transform: сначала обучает скейлер на данных,
        затем преобразует их.
        """
        self.fit(X)  # Сначала вычисляем средние и стандартные отклонения
        return self.transform(X)  # Применяем стандартизацию к данным
